version: '3.8'

services:

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend

  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    networks:
      - backend

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q" , "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - backend

  users-db:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_DATABASE=users
    ports:
      - 27017:27017
    networks:
      - backend

  notifications-db:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_DATABASE=notifications
    ports:
      - 27018:27017
    networks:
      - backend

  products-db:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_DATABASE=products
    ports:
      - 27019:27017
    networks:
      - backend

  orders-db:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
      - MONGO_INITDB_DATABASE=orders
    ports:
      - 27020:27017
    networks:
      - backend

  users-service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=development
      - MONGO_URI=mongodb://user:pass@users-db:27017/users?authSource=admin
      - JWT_SECRET=secret
      - JWT_EXPIRY=1h
    networks:
      - backend

  notifications-service:
    build:
      context: ./services/notifications
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - NODE_ENV=development
      - MONGO_URI=mongodb://user:pass@notifications-db:27017/notifications?authSource=admin
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - USER_SERVICE_URL=http://users-service:3001
    depends_on:
      - users-service
    networks:
      - backend

  products-service:
    build:
      context: ./services/products
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - NODE_ENV=development
      - MONGO_URI=mongodb://user:pass@products-db:27017/products?authSource=admin
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - ORDERS_SERVICE_URL=http://orders-service:3004
    depends_on:
      - users-service
    networks:
      - backend

  orders-service:
    build:
      context: ./services/orders
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
      - NODE_ENV=development
      - MONGO_URI=mongodb://user:pass@orders-db:27017/orders?authSource=admin
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - PRODUCT_SERVICE_URL=http://products-service:3003
    depends_on:
      - users-service
    networks:
      - backend

  scheduler-service:
    build:
      context: ./services/scheduler
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - PRODUCT_SERVICE_URL=http://products-service:3003
      - USER_SERVICE_URL=http://users-service:3001
    depends_on:
      - users-service
      - products-service
      - orders-service
    networks:
      - backend

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - NODE_ENV=development
      - JWT_SECRET=secret
      - USER_SERVICE_URL=http://users-service:3001
      - NOTIFICATION_SERVICE_URL=http://notifications-service:3002
      - PRODUCT_SERVICE_URL=http://products-service:3003
      - ORDER_SERVICE_URL=http://orders-service:3004
      - REDIS_URL=redis://redis:6379
      - ADMIN_SECRET=admin
    depends_on:
      - users-service
      - notifications-service
      - products-service
      - orders-service
      - scheduler-service
      - redis
    networks:
      - backend

networks:
  backend: